snippet point-template
	class point {
		public:
			float x_coordinate, y_coordinate;
			point(float x = 0, float y = 0) {
				this->x_coordinate = x;
				this->y_coordinate = y;
			}
			point get() {
				point result;
				result.x_coordinate = this->x_coordinate;
				result.y_coordinate = this->y_coordinate;
				return result;
			}
			float dist(const point& other_point) {
				return (float)sqrt(pow((other_point.x_coordinate - this->x_coordinate), 2) + pow((other_point.y_coordinate - this->y_coordinate), 2));
			}
			point operator+(const point& operand) {
				point result;
				result.x_coordinate = this->x_coordinate + operand.x_coordinate;
				result.y_coordinate = this->y_coordinate + operand.y_coordinate;
				return result;
			}
			point operator-(const point& operand) {
				point result;
				result.x_coordinate = this->x_coordinate - operand.x_coordinate;
				result.y_coordinate = this->y_coordinate - operand.y_coordinate;
				return result;
			}
	};

snippet debug-template
	void debug(int x) {cerr << x;}
	void debug(long x) {cerr << x;}
	void debug(long long x) {cerr << x;}
	void debug(unsigned x) {cerr << x;}
	void debug(unsigned long x) {cerr << x;}
	void debug(unsigned long long x) {cerr << x;}
	void debug(float x) {cerr << x;}
	void debug(double x) {cerr << x;}
	void debug(long double x) {cerr << x;}
	void debug(char x) {cerr << '\'' << x << '\'';}
	void debug(const char *x) {cerr << '\"' << x << '\"';}
	void debug(const string &x) {cerr << '\"' << x << '\"';}
	void debug(bool x) {cerr << (x ? "true" : "false");}

	template<typename T, typename V>void debug(const pair<T, V> &x);
	template<typename T>void debug(const T &x) {int f = 0; cerr << '{'; for (auto &i: x) cerr << (f++ ? ", " : ""), debug(i); cerr << "}";}
	template<typename T, typename V>void debug(const pair<T, V> &x) {cerr << '{'; debug(x.first); cerr << ", "; debug(x.second); cerr << '}';}
	template<typename ST> void debug(stack<ST> st) { cerr << " "; while(!st.empty()) { cerr << st.top() << " "; st.pop(); }}
	template<typename Q> void debug(queue<Q> que) { while(!que.empty()) { cerr << que.front() << " "; que.pop(); }}
	template<typename DQ> void debug(deque<DQ> dque) { while(!dque.empty()) { cerr << dque.front() << " "; dque.pop_front(); }}
	void dbg() {cerr << "]\n";}template <typename T, typename... V>void dbg(T t, V... v) {debug(t); if (sizeof...(v)) cerr << ", "; dbg(v...);}

	#ifdef DEBUG
	#define dbg(x...) cerr << "\e[91m"<<__func__<<":"<<__LINE__<<" [" << #x << "] = ["; dbg(x); cerr << "\e[39m" << endl;
	#else
	#define dbg(x...) 32
	#endif

snippet code-template

	#include <bits/stdc++.h>
	#define ll long long
	#define sz(x) (int)x.size()
	#define all(x) x.begin(), x.end()

	#define LOOP(i, low, high, shift) for (int i = low; (low < high > 0 ? i <= high : i >= high); (low < high ? i += shift : i -= shift))
	#define LOOP1(high) LOOP(i, 0, high, 1)
	#define LOOP2(i, high) LOOP(i, 0, high, 1)
	#define LOOP3(i, low, high) LOOP(i, low, high, 1)
	#define LOOP4(i, low, high, shift) LOOP(i, low, high, shift)
	#define FIFTH_ARG(a, b, c, d, e, ...) e
	#define GET_LOOP(...) FIFTH_ARG(__VA_ARGS__, LOOP4, LOOP3, LOOP2, LOOP1)
	#define For(...) GET_LOOP(__VA_ARGS__)(__VA_ARGS__)

	using namespace std;

	void print(){cout << "\n";}template<typename T, typename...types> void print(const T& first, const types&...args) {cout << first << " "; print(args...);}

	void solve(){
		$1
	}

	int main() { 
		ios_base::sync_with_stdio(false);
		cin.tie(NULL);
		int t = 1;
		cin >> t;
		for (int i = 1; i <= t; i++) {
			//cout << "Case #" << i << ": ";
					solve();
		}
		return 0;
	}

snippet random
	
	#include <bits/stdc++.h>
	using namespace std;

	#define uid(low, high)  uniform_int_distribution<>(low, high)(rng)
	mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());


	int main() {
		$1
		return 0;
	}


snippet output-vector
	template <typename T = int> void vector_out(vector<T> output) {
		for (T iterator : output) {
			cout << iterator << " ";
		}
		cout << "\n";
	}

snippet prefix-array
	template<typename T = int> vector<T> prefix(vector<T> normal_array) {
		vector<T> prefix_array((int)normal_array.size() + 1);
		for (int i = 1; i <= (int)normal_array.size(); i++) {
			prefix_array[i] = prefix_array[i - 1] + normal_array[i - 1]; 
		}
		return prefix_array;
	}

snippet difference-array
	template <typename T> class difference_array {
		public: 
			vector<int> diff_array;
			difference_array(int array_size) {
				diff_array = vector<int> (array_size + 2, 0);
			}

			void change(int from, int to, int value) {
				diff_array[from] += value;
				diff_array[to + 1] -= value;
			}

			vector<int> get() {
				for (int i = 1; i <= (int)diff_array.size(); i++) {
					diff_array[i] += diff_array[i - 1];
				}
				diff_array.pop_back();
				return diff_array;
			}
	};

snippet knapsack
	vector<vector<int>> dp(100, vector<int>(100, -1));

	int knapsack(int index, int remaining_weight, vector<int>& weights, vector<int>& values) {
		/* Base conditions:
		 * 1. When knapsack is full.
		 * 2. When items are finished.
		 */

		if (remaining_weight == 0) return 0;
		if (index < 0) return 0;
		if (dp[index][remaining_weight] != -1) return dp[index][remaining_weight];

		// Not choose
		int ans = knapsack(index - 1, remaining_weight, weights, values);

		// Choose if knapsack has enough space
		if (remaining_weight - weights[index] >= 0)
			ans = max(ans, knapsack(index - 1, remaining_weight - weights[index], weights, values) + values[index]);

		return dp[index][remaining_weight] = ans;
	}

snippet ispalindrome
	template<typename T> bool isPalindrome(T conatiner) {
		int low = 0, high = conatiner.size() - 1;

		while(low < high) {
			if (conatiner[low] != conatiner[high]) return false;
			low++, high--;
		}

		return true;
	}

snippet direction
	const vector<pair<int, int>> d4 = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};
	const vector<pair<int, int>> d8 = {{1, 0}, {1, 1}, {0, 1}, {-1, 1}, {-1, 0}, {-1, -1}, {0, -1}, {1, -1}};

snippet beginend
	$1.begin(), $1.end()

snippet sort
	sort($1.begin(), $1.end()$2);$3
